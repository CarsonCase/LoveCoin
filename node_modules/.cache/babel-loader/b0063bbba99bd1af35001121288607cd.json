{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/carson/Documents/programming/blockchain/loveCoin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Navbar from './Navbar';\nimport './App.css';\nimport LoveCoin from \"../abis/LoveCoin.json\";\nimport Main from \"./Main.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connectBlockchain = async () => {\n      await this.loadWeb3();\n      await this.loadBlockchainData();\n    };\n\n    this.loadBlockchainData = async () => {\n      const web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        account: accounts[0]\n      });\n      this.setState({\n        loading: true\n      });\n      const netId = await web3.eth.net.getId(); //Load LoveCoin Contract\n\n      const loveCoinData = LoveCoin.networks[netId];\n\n      if (loveCoinData) {\n        const loveCoin = new web3.eth.Contract(LoveCoin.abi, loveCoinData.address);\n        this.setState({\n          loveCoin\n        });\n        let user = await loveCoin.methods.users(this.state.account).call();\n        this.setState({\n          user: user\n        });\n        let loveCoinBalance = await loveCoin.methods.balanceOf(this.state.account).call();\n        this.setState({\n          loveCoinBalance: loveCoinBalance.toString()\n        });\n      } else {\n        window.alert(\"LoveCoin Contract not yet deployed to blockchain :(\");\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.loadWeb3 = async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n        this.setState({\n          isCOnnected: true\n        });\n      } else if (window.web3) {\n        weindow.web3 = new Web3(window.web3.currentProvider);\n        this.setState({\n          isConnected: true\n        });\n      } else {\n        window.alert(\"Non-Ethereum browser detected. You should consider using MetaMask!\");\n      }\n    };\n\n    this.join = (sex, handle) => {\n      this.state.loading = true;\n      console.log(\"Is called\");\n      this.state.loveCoin.methods.join(sex, handle).send({\n        from: this.state.account\n      });\n      this.state.loading = false;\n    };\n\n    this.state = {\n      account: '0x0',\n      loveCoin: {},\n      loveCoinBalance: {},\n      user: {},\n      loading: false,\n      isConnected: false\n    };\n  }\n\n  render() {\n    if (this.state.loading) {\n      return content = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading... Please be Patient with me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {\n          account: this.state.account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          connected: this.state.isConnected,\n          connectBlockchain: this.connectBlockchain,\n          account: this.state.account,\n          balance: this.state.loveCoinBalance,\n          user: this.state.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/carson/Documents/programming/blockchain/loveCoin/src/components/App.js"],"names":["React","Component","Web3","Navbar","LoveCoin","Main","App","constructor","props","connectBlockchain","loadWeb3","loadBlockchainData","web3","window","accounts","eth","getAccounts","setState","account","loading","netId","net","getId","loveCoinData","networks","loveCoin","Contract","abi","address","user","methods","users","state","call","loveCoinBalance","balanceOf","toString","alert","ethereum","enable","isCOnnected","weindow","currentProvider","isConnected","join","sex","handle","console","log","send","from","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport './App.css'\nimport LoveCoin from \"../abis/LoveCoin.json\"\nimport Main from \"./Main.js\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      loveCoin: {},\n      loveCoinBalance: {},\n      user: {},\n      loading: false,\n      isConnected: false\n    }\n  }\n\n  connectBlockchain = async()=>{\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  loadBlockchainData = async()=>{\n\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({account:accounts[0]});\n    this.setState({loading:true});\n    const netId = await web3.eth.net.getId();\n        //Load LoveCoin Contract\n        const loveCoinData = LoveCoin.networks[netId]\n        if(loveCoinData){\n          const loveCoin = new web3.eth.Contract(LoveCoin.abi,loveCoinData.address);\n          this.setState({loveCoin});\n          let user = await loveCoin.methods.users(this.state.account).call();\n          this.setState({user:user});\n          let loveCoinBalance = await loveCoin.methods.balanceOf(this.state.account).call();\n          this.setState({loveCoinBalance: loveCoinBalance.toString()});\n        }else{\n          window.alert(\"LoveCoin Contract not yet deployed to blockchain :(\");\n        }\n\n    this.setState({loading:false});\n    \n  }\n\n  loadWeb3 = async()=>{\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      this.setState({isCOnnected:true});\n    }\n    else if (window.web3){\n      weindow.web3 = new Web3(window.web3.currentProvider);\n      this.setState({isConnected:true});\n    }\n    else{\n      window.alert(\"Non-Ethereum browser detected. You should consider using MetaMask!\");\n    }\n  }\n\n  //Join As new user function\n  join = (sex,handle)=>{\n    this.state.loading = true;\n    console.log(\"Is called\");\n    this.state.loveCoin.methods.join(sex,handle).send({from:this.state.account});\n    this.state.loading = false;\n  }\n\n  render() {\n    if(this.state.loading){\n      return(\n      content = <h1>Loading... Please be Patient with me</h1>\n      );\n    }else{\n      return (\n        <div>\n          <Navbar account={this.state.account} />\n          <Main\n            connected = {this.state.isConnected}\n            connectBlockchain ={this.connectBlockchain}\n            account = {this.state.account}\n            balance = {this.state.loveCoinBalance}\n            user = {this.state.user}\n            />\n        </div>\n      );\n  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}