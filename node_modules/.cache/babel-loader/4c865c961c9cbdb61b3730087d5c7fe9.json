{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/carson/Documents/programming/blockchain/loveCoin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Navbar from './Navbar';\nimport './App.css';\nimport LoveCoin from \"../abis/LoveCoin.json\";\nimport Main from \"./Main.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connectBlockchain = async () => {\n      await this.loadWeb3();\n      await this.loadBlockchainData();\n    };\n\n    this.loadBlockchainData = async () => {\n      //this.setState({loading:true});\n      const web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        account: accounts[0]\n      });\n      const netId = await web3.eth.net.getId(); //Load LoveCoin Contract\n\n      const loveCoinData = LoveCoin.networks[netId];\n\n      if (loveCoinData) {\n        const loveCoin = new web3.eth.Contract(LoveCoin.abi, loveCoinData.address);\n        this.setState({\n          loveCoin: loveCoin\n        });\n        let user = await loveCoin.methods.users(this.state.account).call();\n        this.setState({\n          user: user\n        });\n        let loveCoinBalance = await loveCoin.methods.balanceOf(this.state.account).call();\n        loveCoinBalance = web3.utils.fromWei(loveCoinBalance, \"ether\");\n        console.log(loveCoinBalance);\n        this.setState({\n          loveCoinBalance: loveCoinBalance.toString()\n        });\n        let m = await loveCoin.methods.male_score_sum().call();\n        let f = await loveCoin.methods.female_score_sum().call();\n        let mc = await loveCoin.methods.maleUserCount().call();\n        let fc = await loveCoin.methods.femaleUserCount().call();\n        this.setState({\n          globals: {\n            female_scores: f.toString(),\n            male_scores: m.toString(),\n            female_count: Number(fc),\n            male_count: Number(mc)\n          }\n        });\n      } else {\n        window.alert(\"LoveCoin Contract not yet deployed to blockchain :(\");\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.loadWeb3 = async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n        this.setState({\n          isConnected: true\n        });\n      } else if (window.web3) {\n        weindow.web3 = new Web3(window.web3.currentProvider);\n        this.setState({\n          isConnected: true\n        });\n      } else {\n        window.alert(\"Non-Ethereum browser detected. You should consider using MetaMask!\");\n      }\n    };\n\n    this.join = async (sex, handle) => {\n      await this.setState({\n        loading: true\n      });\n      await this.state.loveCoin.methods.join(sex, handle).send({\n        from: this.state.account\n      });\n      await this.loadBlockchainData();\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getFeed = async () => {\n      if (this.state.isConnected) {\n        let feed = [];\n        let feedLookup = [];\n        let feedLength;\n        let matches = await this.getMatches(); //If user is male then itterate over all females \n        //In the future find ways to jumble this up so it's more random. Not important for small ammounts of users though\n\n        if (this.state.user.male === true) {\n          feedLength = await this.state.loveCoin.methods.femaleUserCount().call();\n\n          for (let i = 0; i < feedLength; i++) {\n            let addition = await this.state.loveCoin.methods.femaleUsers(0).call();\n            let p = await this.getUserFromAddress(addition);\n\n            if (!matches.some(o => JSON.stringify(o) === JSON.stringify(p))) {\n              feedLookup.push(addition);\n              feed.push(p);\n            }\n          }\n        } //If user is female then itterate over all her likes\n        else if (this.state.user.male === false) {\n            feedLength = await this.state.loveCoin.methods.numberOfLikes(this.state.account).call();\n\n            for (var i = 0; i < feedLength; i++) {\n              let addition = await this.state.loveCoin.methods.have_liked(this.state.account, i).call();\n              let p = await this.getUserFromAddress(addition);\n\n              if (!matches.some(o => JSON.stringify(o) === JSON.stringify(p))) {\n                feedLookup.push(addition);\n                feed.push(p);\n              }\n            }\n          }\n\n        return [feed, feedLookup];\n      }\n    };\n\n    this.like = async who => {\n      await this.state.loveCoin.methods.like(who).send({\n        from: this.state.account\n      });\n    };\n\n    this.accept = async who => {\n      //What this guy says ^\n      await this.state.loveCoin.methods.accept(who).send({\n        from: this.state.account\n      });\n    };\n\n    this.getMatches = async () => {\n      let matches = []; //THIS IS NOT SUSTAINABLE. CHANGE THIS LATER\n\n      if (this.state.user.male) {\n        for (let i = 0; i < this.state.globals.female_count; i++) {\n          let female = await this.state.loveCoin.methods.femaleUsers(i).call();\n          let state = await this.state.loveCoin.methods.states(female, this.state.account).call();\n\n          if (state == 2) {\n            let user = await this.state.loveCoin.methods.users(female).call();\n            matches.push(user);\n          }\n        }\n      } else if (this.state.user.male === false) {\n        let numLikes = await this.state.loveCoin.methods.numberOfLikes(this.state.account).call();\n\n        for (let i = 0; i < numLikes; i++) {\n          let male = await this.state.loveCoin.methods.have_liked(this.state.account, i).call();\n          let state = await this.state.loveCoin.methods.states(this.state.account, male).call();\n\n          if (state == 2) {\n            let user = await this.state.loveCoin.methods.users(male).call();\n            matches.push(user);\n          }\n        }\n      }\n\n      return matches;\n    };\n\n    this.state = {\n      account: '0x0',\n      loveCoin: {},\n      loveCoinBalance: '0',\n      user: {},\n      loading: false,\n      isConnected: false,\n      globals: {\n        female_scores: '0',\n        male_scores: '0',\n        female_count: 0,\n        male_count: 0\n      },\n      feed: []\n    };\n  }\n\n  async getUserFromAddress(address) {\n    let user = await this.state.loveCoin.methods.users(address).call();\n    return user;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return content = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading... Please be Patient with me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {\n          account: this.state.account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          connected: this.state.isConnected,\n          connectBlockchain: this.connectBlockchain,\n          join: this.join,\n          account: this.state.account,\n          balance: this.state.loveCoinBalance,\n          user: this.state.user,\n          globals: this.state.globals,\n          getFeed: this.getFeed,\n          like: this.like,\n          accept: this.accept,\n          getMatches: this.getMatches\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/carson/Documents/programming/blockchain/loveCoin/src/components/App.js"],"names":["React","Component","Web3","Navbar","LoveCoin","Main","App","constructor","props","connectBlockchain","loadWeb3","loadBlockchainData","web3","window","accounts","eth","getAccounts","setState","account","netId","net","getId","loveCoinData","networks","loveCoin","Contract","abi","address","user","methods","users","state","call","loveCoinBalance","balanceOf","utils","fromWei","console","log","toString","m","male_score_sum","f","female_score_sum","mc","maleUserCount","fc","femaleUserCount","globals","female_scores","male_scores","female_count","Number","male_count","alert","loading","ethereum","enable","isConnected","weindow","currentProvider","join","sex","handle","send","from","getFeed","feed","feedLookup","feedLength","matches","getMatches","male","i","addition","femaleUsers","p","getUserFromAddress","some","o","JSON","stringify","push","numberOfLikes","have_liked","like","who","accept","female","states","numLikes","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport './App.css'\nimport LoveCoin from \"../abis/LoveCoin.json\"\nimport Main from \"./Main.js\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      loveCoin: {},\n      loveCoinBalance: '0',\n      user: {},\n      loading: false,\n      isConnected: false,\n      globals: {\n        female_scores: '0',\n        male_scores: '0',\n        female_count: 0,\n        male_count: 0\n      },\n      feed:[]\n    }\n  }\n\n  connectBlockchain = async()=>{\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  loadBlockchainData = async()=>{\n    //this.setState({loading:true});\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({account:accounts[0]});\n    const netId = await web3.eth.net.getId();\n        //Load LoveCoin Contract\n        const loveCoinData = LoveCoin.networks[netId]\n        if(loveCoinData){\n          const loveCoin = new web3.eth.Contract(LoveCoin.abi,loveCoinData.address);\n          this.setState({loveCoin:loveCoin});\n          let user = await loveCoin.methods.users(this.state.account).call();\n          this.setState({user:user});\n          let loveCoinBalance = await loveCoin.methods.balanceOf(this.state.account).call();\n          loveCoinBalance = web3.utils.fromWei(loveCoinBalance,\"ether\");\n          console.log(loveCoinBalance);\n          this.setState({loveCoinBalance: loveCoinBalance.toString()});\n\n          let m = await loveCoin.methods.male_score_sum().call();\n          let f = await loveCoin.methods.female_score_sum().call();\n          let mc = await loveCoin.methods.maleUserCount().call();\n          let fc = await loveCoin.methods.femaleUserCount().call();\n          this.setState({\n            globals:{\n              female_scores: f.toString(),\n              male_scores: m.toString(),\n              female_count: Number(fc),\n              male_count: Number(mc)\n            }\n\n          });\n      \n        }else{\n          window.alert(\"LoveCoin Contract not yet deployed to blockchain :(\");\n        }\n\n    this.setState({loading:false});\n    \n  }\n\n  loadWeb3 = async()=>{\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      this.setState({isConnected:true});\n    }\n    else if (window.web3){\n      weindow.web3 = new Web3(window.web3.currentProvider);\n      this.setState({isConnected:true});\n    }\n    else{\n      window.alert(\"Non-Ethereum browser detected. You should consider using MetaMask!\");\n    }\n  }\n\n  //Join As new user function\n  join = async(sex,handle)=>{\n    await this.setState({loading:true});\n    await this.state.loveCoin.methods.join(sex,handle).send({from:this.state.account});\n    await this.loadBlockchainData();\n    this.setState({loading:false});\n  }\n\n  getFeed = async()=>{\n    if(this.state.isConnected){\n      let feed=[];\n      let feedLookup=[]\n      let feedLength;\n      let matches = await this.getMatches();\n\n      //If user is male then itterate over all females \n      //In the future find ways to jumble this up so it's more random. Not important for small ammounts of users though\n      if(this.state.user.male ===true){\n        feedLength = await this.state.loveCoin.methods.femaleUserCount().call();\n        for(let i=0; i < feedLength; i++){\n          let addition = await this.state.loveCoin.methods.femaleUsers(0).call();\n          let p = await this.getUserFromAddress(addition);\n          if(!matches.some(o=>JSON.stringify(o)===JSON.stringify(p))){\n            feedLookup.push(addition);\n            feed.push(p);  \n          }\n        }\n\n      }\n      //If user is female then itterate over all her likes\n      else if(this.state.user.male ===false){\n        feedLength = await this.state.loveCoin.methods.numberOfLikes(this.state.account).call();\n        for(var i=0; i<feedLength; i++){\n          let addition = await this.state.loveCoin.methods.have_liked(this.state.account,i).call();\n          let p = await this.getUserFromAddress(addition);\n          if(!matches.some(o=>JSON.stringify(o)===JSON.stringify(p))){\n            feedLookup.push(addition);\n            feed.push(p);\n          }\n        }\n      }\n      return[feed,feedLookup];\n    }\n  }\n\n  like=async(who)=>{\n    await this.state.loveCoin.methods.like(who).send({from:this.state.account});\n  }\n\n  accept = async(who)=>{  //What this guy says ^\n    await this.state.loveCoin.methods.accept(who).send({from:this.state.account});\n  }\n\n  async getUserFromAddress(address){\n    let user = await this.state.loveCoin.methods.users(address).call();\n    return user;\n  }\n\n  getMatches =async()=>{\n    let matches = [];\n    //THIS IS NOT SUSTAINABLE. CHANGE THIS LATER\n    if(this.state.user.male){\n      for(let i=0; i< this.state.globals.female_count;i++){\n        let female = await this.state.loveCoin.methods.femaleUsers(i).call();\n        let state = await this.state.loveCoin.methods.states(female,this.state.account).call();\n        if(state==2){\n          let user = await this.state.loveCoin.methods.users(female).call();\n          matches.push(user);\n        }\n\n      }\n    }else if(this.state.user.male === false){\n      let numLikes = await this.state.loveCoin.methods.numberOfLikes(this.state.account).call();\n      for(let i=0; i<numLikes; i++){\n        let male = await this.state.loveCoin.methods.have_liked(this.state.account,i).call();\n        let state = await this.state.loveCoin.methods.states(this.state.account,male).call();\n        if(state==2){\n          let user = await this.state.loveCoin.methods.users(male).call();\n          matches.push(user);\n        }\n      }\n    }\n    return matches;\n  }\n\n  render() {\n    if(this.state.loading){\n      return(\n      content = <h1>Loading... Please be Patient with me</h1>\n      );\n    }else{\n      return (\n        <div>\n          <Navbar account={this.state.account} />\n          <Main\n            connected = {this.state.isConnected}\n            connectBlockchain ={this.connectBlockchain}\n            join = {this.join}\n            account = {this.state.account}\n            balance = {this.state.loveCoinBalance}\n            user = {this.state.user}\n            globals = {this.state.globals}\n            getFeed = {this.getFeed}\n            like = {this.like}\n            accept = {this.accept}\n            getMatches = {this.getMatches}\n            />\n        </div>\n      );\n  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}